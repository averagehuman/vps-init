#!/bin/sh

set -e

host="$1"

if [ ! "$host" ]; then
    echo "host required."
	echo "eg. inithost 10.10.10.10"
	echo "eg. inithost 10.10.10.10:2222"
	echo "eg. inithost username@10.10.10.10:2222"
    exit 1
fi
user=$(echo "$host" | sed -e "s/@.*//" -e "s/:.*//")
ip=$(echo "$host" | sed -e "s/.*@//" -e "s/:.*//")
port=$(echo "$host" | sed "s/.*://")


if [ "$user" = "$ip" ]; then
    user="root"
fi

if [ "$port" = "$host" ]; then
    port=22
fi


postgres_port=7274
devpi_port=3131
memcached_port=12321

pass1=""
pass2=""

echo -n "Password for admin user (leave blank for passwordless auth only) :"

stty -echo
read pass1
stty echo
echo ""

if [ "$pass1" != "" ]; then
    echo -n "Repeat password: "

    stty -echo
    read pass2
    stty echo
    echo ""

    if [ "$pass1" != "$pass2" ];then
        echo "ERROR: passwords didn't match"
        exit 1
    else
        echo "$pass1" > .adminpass
    fi
fi

postgres=
docker=
devpi=
varnish=
java=
es=

until [ "$postgres" = "y" ] || [ "$postgres" = "n" ]; do
	echo -n "Install postgres? [y/n] "
	read postgres
done

until [ "$devpi" = "y" ] || [ "$devpi" = "n" ]; do
	echo -n "Install devpi-server (pypi caching proxy)? [y/n] "
	read devpi
done

until [ "$docker" = "y" ] || [ "$docker" = "n" ]; do
	echo -n "Install docker? [y/n] "
	read docker
done

until [ "$varnish" = "y" ] || [ "$varnish" = "n" ]; do
	echo -n "Install varnish? [y/n] "
	read varnish
done

until [ "$java" = "y" ] || [ "$java" = "n" ]; do
	echo -n "Install java? [y/n] "
	read java
done

until [ "$es" = "y" ] || [ "$es" = "n" ]; do
	echo -n "Install ElasticSearch? [y/n] "
	read es
done

# tar files
build_root="vps-init-ubuntu"
rm -rf $build_root
mkdir -p $build_root

cp ubuntu/prologue.sh $build_root/init-server.tmp
echo "memcached_port=$memcached_port" >> $build_root/init-server.tmp

parts="ubuntu/core.sh"
if [ $postgres = "y" ]; then
	echo "postgres_port=$postgres_port" >> $build_root/init-server.tmp
	parts="$parts ubuntu/postgres.sh";
fi
if [ $devpi = "y" ]; then
	echo "devpi_port=$devpi_port" >> $build_root/init-server.tmp
	parts="$parts ubuntu/devpi.sh";
fi
if [ $docker = "y" ]; then parts="$parts ubuntu/docker.sh"; fi
if [ $varnish = "y" ]; then parts="$parts ubuntu/varnish.sh"; fi
if [ $java = "y" ]; then parts="$parts ubuntu/java.sh"; fi
if [ $es = "y" ]; then parts="$parts ubuntu/elasticsearch.sh"; fi
parts="$parts ubuntu/epilogue.sh"

cat $build_root/init-server.tmp $parts > $build_root/init-server
rm $build_root/init-server.tmp

cp ubuntu/postinstall.sh $build_root/postinstall
chmod +x $build_root/init-server
chmod +x $build_root/postinstall

cp -r ubuntu/etc $build_root
if [ -f keys/authorized_keys ]; then
    cp keys/authorized_keys $build_root/etc
fi

if [ -e .adminpass ]; then
    cp .adminpass $build_root
fi

tar -czvf vps-init-ubuntu.tgz $build_root
rm -rf $build_root

#copy to remote server
echo ":: copying files to host"
scp -P $port vps-init-ubuntu.tgz $user@$ip:~
rm -rf vps-init-ubuntu.tgz


