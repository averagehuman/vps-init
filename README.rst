
vps-init
========

A collection of scripts for initially provisioning a single remote Ubuntu
server prior to installing a web application. (Tested on Ubuntu 12.04 LTS and
Ubuntu 14.04 LTS)

Prepare Remote Host
-------------------

1. Create the remote server via the VPS web interface or otherwise, and ensure
   that you can ssh to the machine as root::

       [local] $ ssh root@<IP-ADDRESS>

2. If there are no public/private key pairs present, or you want to replace the
   ones that are here, run::

       [local] $ ./keygen <SERVER-ID>

   where <SERVER-ID> is an identifier for the server that you are provisioning.
   For example, it may be the server hostname or IP, or some application specific
   label. The default is 'GENERIC'.
   
   keygen will create two sets of keys - one for you the deployer which will
   stay on the local machine, and one for a generic ``admin`` user on the remote
   host.  You will be asked for a a passphrase - this passphrase will be used
   for the creation of both keys and, as a basic security mechanism, to encrypt
   the zip file containing the keys.

   TIP: you can include a ``.passphrase`` file in the same directory as
   ``keygen`` rather than typing and repeating at the console.

   Once created, you will be asked if you want to copy these keys to your
   local ``~/.ssh`` directory. If you agree, then on subsequent runs of the
   ``keygen`` script, you will be asked if you want to use these existing keys
   rather than create new ones.

3. Run the ``inithost`` script::

       [local] $ ./inithost <IP-ADDRESS>

   or::

       [local] $ ./inithost <IP-ADDRESS>:<PORT>

   (where <PORT> here is the remote port on which SSH is running, default is 22).
   
   This will create a tar file ``prepare_ubuntu.tgz`` and ``scp`` it to the remote host.
   The tar file contains two provisioning scripts ``server-init``  and ``server-install``
   along with other utilities.
   
4. ssh to the server and untar the file::

       [remote] $ tar -xzvf prepare_ubuntu.tgz

   and run the the init script::

       [remote] $ ./server-init

   Among other things, this will create the ``admin`` user and end by updating
   the ``sshd`` config.
   
5. IMPORTANT - make a note of the updated sshd port number printed out by the previous
   script and update your *local* ssh config file accordingly.
   
   For example, include a stanza similar to::

        Host <HOST>
        HostName <IP-ADDRESS>
        Port <PORT>
        User admin
        IdentityFile ~/.ssh/<SERVER-ID>-deployer.key

   where <PORT> is the random high port number generated by the ``prepare_ubuntu`` script.

6. Next run the additional package install script:

       [remote] $ ./server-install

   which will install additional tools and services, for example postgres.

7. Restart the server::

       [remote] $ shutdown -r now

8. Ensure you can ssh to the remote host as the ``admin`` user::

       [local] $ ssh admin@<HOST or IP_ADDRESS>

   If there are problems then check that the remote ``/home/admin/.ssh`` directory
   looks ok, eg. that file permissions and ownership are correct. Also check that
   ``/home/admin/.ssh/authorized_keys`` exists and contains the deployer public
   key. The deployer public key should be present on your local machine as
   ``~/.ssh/<SERVER-ID>-deployer.key.pub``.

   Once logged in you should be able to both ``sudo`` and run ``psql`` without a
   password prompt from the system or postgres respectively.

   If things are working, then update the sshd config to disallow password
   authentication and root logins::

       PasswordAuthentication no
       PermitRootLogin no

   in ``/etc/ssh/sshd_config``, and restart the sshd server::

       [remote] $ service ssh restart

9. If you need to ``git clone`` or ``hg clone`` on the server then ensure that
   the ``admin`` public key (``<SERVER-ID>-admin.key.pub``) is copied to the
   repository provider (eg. github or codebasehq ) by logging into your account
   with the provider and copy/pasting the key in the appropriate place.
   
   If you are not using SSH Agent Forwarding then ensure that the associated
   **private key** is present on the server, ie. that
   ``/home/admin/.ssh/<SERVER-ID>-admin.key`` exists.


server-init
-----------

+ Create user ``admin``
+ Create system user ``www``
+ Create system user ``devpi``
+ Setup ``ssh`` keys for ``admin``
+ Replace default ``sudoers`` file
+ Setup unattended upgrades
+ Change ssh server port to random high number
+ Install and enable ufw


server-install
--------------

+ Install postgres, python-dev, build-essential, memcached, supervisor, ...
+ Install java
+ Install docker
+ Install setuptools, pip, virtualenv, orb
+ Install devpi-server instance, managed with supervisor
+ Create postgres superuser 'admin' for peer-authentication
+ Update postgres config - pg_hba.conf

