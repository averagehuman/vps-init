
vps-init
========

A collection of scripts for initially provisioning a single remote Ubuntu
server prior to installing a web application. (ubuntu version 12.04)

Prepare Remote Host
-------------------

1. Create the remote server via the VPS web interface or otherwise, and ensure
   that you can ssh to the machine as root::

       [local] $ ssh root@<IP-ADDRESS>

2. If there are no zipped public/private key pairs present, or you want to
   replace the ones that are here, run::

       [local] $ ./keygen

   This will create two sets of keys - one for you the deployer which will stay
   on the local machine, and one for a generic ``admin`` user on the remote host.
   The keys will be zipped and password-encrypted as a basic security mechanism
   to prevent at least the keys being added to source control as plaintext.

3. Run the ``inithost`` script::

       [local] $ ./inithost <IP-ADDRESS>

   or::

       [local] $ ./inithost <IP-ADDRESS>:<PORT>

   This will create a tar file ``prepare_ubuntu.tar`` and ``scp`` it to the remote host.
   The tar file contains a provisioning script ``prepare_ubuntu.sh`` along with the
   zipped admin key pairs, and other utilities.
   
4. ssh to the server and untar the file::

       [remote] $ tar -xf prepare_ubuntu.tar

   and run the script::

       [remote] $ ./prepare_ubuntu.sh

   This will create the ``admin`` user, install some basic tools (postgres, vim, etc...),
   and end by updating the ``sshd`` config.
   
5. IMPORTANT - make a note of the updated sshd port number printed out by the previous
   script and update your *local* ssh config file accordingly.
   
   For example, include a stanza similar to::

        Host <HOST>
        HostName <IP-ADDRESS>
        Port <PORT>
        User admin
        IdentityFile ~/.ssh/deployer.key

   where <PORT> is the random high port number generated by the ``prepare_ubuntu`` script.

6. Restart the server::

       [remote] $ shutdown -r now

7. Ensure you can ssh to the remote host as the ``admin`` user::

       [local] $ ssh admin@<HOST or IP_ADDRESS>

   The login should be passwordless, if you *are* prompted for a password or
   passphrase, then check that the remote ``/home/admin/.ssh`` directory looks ok,
   eg. that file permissions and ownership are correct. Also check that
   ``/home/admin/.ssh/authorized_keys`` exists and contains the deployer public
   key. The deployer public key should be present on your local machine as
   ``~/.ssh/deployer.key.pub``.

   Once logged in you should be able to both ``sudo`` and run ``psql`` without a
   password prompt.

   If things are working, then update the sshd config to disallow root logins::

       PermitRootLogin no

   in ``/etc/ssh/sshd_config``, and restart the sshd server::

       [remote] $ service ssh restart

8. If you need to ``git clone`` or ``hg clone`` on the server then ensure that the
   ``admin`` public key (``/home/admin/.ssh/admin.key.pub`` on the remote machine) is
   copied to the source code provider, eg. codebasehq or github, by logging into
   your account with the provider and copy/pasting the key in the appropriate place.


tools/prepare_ubuntu.sh
-----------------------

::

    #!/bin/sh
    
    set -e
    
    pg_version="9.1"
    
    ###############################################################################
    # create admin user
    ###############################################################################
    groupadd -r -f admin
    if [ ! $(grep '^admin:' /etc/passwd) ]; then
        useradd -r -m -g admin admin
        chsh -s /bin/bash admin
    fi
    if [ ! -d /home/admin/.ssh ]; then
        mkdir /home/admin/.ssh
        chown admin:admin /home/admin/.ssh
        chmod 700 /home/admin/.ssh
    fi
    
    if [ -e .adminpass ]; then
        tr -d '\n' < .adminpass | chpasswd
        chown admin:admin .adminpass;
        chmod 600 .adminpass;
    else
        # ssh-only authentication
        passwd -l admin
    fi
    
    ###############################################################################
    # update sudoers file
    ###############################################################################
    cat > /etc/sudoers <<EOF
    #
    # This file MUST be edited with the 'visudo' command as root.
    #
    # Please consider adding local content in /etc/sudoers.d/ instead of
    # directly modifying this file.
    #
    # See the man page for details on how to write a sudoers file.
    #
    Defaults	env_reset
    Defaults	exempt_group=admin
    Defaults	secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    
    # Host alias specification
    
    # User alias specification
    
    # Cmnd alias specification
    
    # User privilege specification
    root	ALL=(ALL:ALL) ALL
    
    # Members of the admin group may gain root privileges
    %admin  ALL=NOPASSWD:ALL
    
    # Allow members of group sudo to execute any command
    %sudo	ALL=(ALL:ALL) ALL
    
    
    EOF
    
    chmod 440 /etc/sudoers
    
    ###############################################################################
    # apt-get package update
    ###############################################################################
    apt-get -y update
    apt-get -y dist-upgrade
    apt-get -y install linux-headers-$(uname -r) build-essential
    apt-get -y install postgresql libpq-dev
    apt-get -y install python-dev python-virtualenv
    apt-get -y install vim git-core ufw unzip
    apt-get -y clean
    
    # remove setuptools
    #command dpkg -s python-setuptools >/dev/null 2>&1
    #if [ $? -eq 0 ]; then
    #    echo ":: removing setuptools"
    #    apt-get -y remove python-setuptools
    #fi
    
    ###############################################################################
    # install orb (virtualenv utility)
    ###############################################################################
    if [ -e orb ]; then
        echo ":: installing orb utility to /usr/local/bin/orb"
        if [ -e /usr/local/bin/orb ]; then
            cp /usr/local/bin/orb /usr/local/bin/_orb
        fi
        cp orb /usr/local/bin
    fi
    
    ###############################################################################
    # create postgres superuser 'admin' for peer authentication
    ###############################################################################
    echo ":: creating postgres superuser"
    #password=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c30)
    exists=$(su postgres -c "psql -tqc \"SELECT count(1) FROM pg_catalog.pg_user WHERE usename = 'admin'\"")
    if [ $exists = 0 ]; then
        su postgres -c "createuser -s admin"
    fi
    exists=$(su postgres -c "psql -lqt | cut -d \| -f 1 | grep -w admin | wc -l")
    if [ $exists = 0 ]; then
        su postgres -c "createdb -O admin admin"
    fi
    
    # lock postgres account (use the just created superuser instead)
    passwd -l postgres
    
    ###############################################################################
    # update postgres config
    ###############################################################################
    echo ":: updating postgres config"
    
    # use our own pg_hba.conf (peer authentication for admin user, md5 for local connections)
    cp pg_hba.conf /etc/postgresql/$pg_version/main/pg_hba.conf
    chown postgres:postgres /etc/postgresql/$pg_version/main/pg_hba.conf
    chmod 640 /etc/postgresql/$pg_version/main/pg_hba.conf
    
    # listen to requests from localhost only
    sed -i -e "s/#listen_addresses.*/listen_addresses = 'localhost'/" /etc/postgresql/$pg_version/main/postgresql.conf
    
    ###############################################################################
    # ssh key setup
    ###############################################################################
    echo ":: unpacking ssh keys"
    unzip remote-keys.zip
    cp remote-keys/* /home/admin/.ssh/
    rm -rf remote-keys
    chown -R admin:admin /home/admin/.ssh
    
    sshport=$(python -c "from random import randint; print randint(10000,30000)")
    sed -i.orig -e "s/^Port .*/Port $sshport/g" /etc/ssh/sshd_config
    
    ###############################################################################
    # enable ufw
    ###############################################################################
    ufw default deny incoming
    ufw allow http
    ufw allow $sshport
    ufw enable
    
    echo "CHANGED SSH PORT: $sshport (restart to take effect)"
    


