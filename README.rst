
vps-init
========

A collection of scripts for initially provisioning a single remote Ubuntu
server prior to installing a web application. (ubuntu version 12.04)

Prepare Remote Host
-------------------

1. Create the remote server via the VPS web interface or otherwise, and ensure
   that you can ssh to the machine as root::

       [local] $ ssh root@<IP-ADDRESS>

2. If there are no zipped public/private key pairs present, or you want to
   replace the ones that are here, run::

       [local] $ ./keygen

   This will create two sets of keys - one for you the deployer which will stay
   on the local machine, and one for a generic ``admin`` user on the remote host.
   The keys will be zipped and password-encrypted as a basic security mechanism
   to prevent at least the keys being added to source control as plaintext.

3. Run the ``inithost`` script::

       [local] $ ./inithost <IP-ADDRESS>

   or::

       [local] $ ./inithost <IP-ADDRESS>:<PORT>

   This will create a tar file ``prepare_ubuntu.tar`` and ``scp`` it to the remote host.
   The tar file contains a provisioning script ``prepare_ubuntu.sh`` along with the
   zipped admin key pairs, and other utilities.
   
4. ssh to the server and untar the file::

       [remote] $ tar -xf prepare_ubuntu.tar

   and run the script::

       [remote] $ ./prepare_ubuntu.sh

   This will create the ``admin`` user, install some basic tools (postgres, vim, etc...),
   and end by updating the ``sshd`` config. MAKE A NOTE OF THE UPDATED SSHD PORT
   NUMBER AND UPDATE YOUR ``LOCAL`` SSH CONFIG FILE ACCORDINGLY - for example, by including
   a stanza similar to::

        Host <HOST>
        HostName <IP-ADDRESS>
        Port <PORT>
        User admin
        IdentityFile ~/.ssh/deployer.key

   where <PORT> is the random high port number generated by the ``prepare_ubuntu`` script.

5. Restart the server::

       [remote] $ shutdown -r now

6. Ensure you can ssh to the remote host as the ``admin`` user::

       [local] $ ssh admin@<HOST or IP_ADDRESS>

   The login should be passwordless, if you *are* prompted for a password or
   passphrase, then check that the remote ``/home/admin/.ssh`` directory looks ok,
   eg. that file permissions and ownership are correct. Also check that
   ``/home/admin/.ssh/authorized_keys`` exists and contains the deployer public
   key. The deployer public key should be present on your local machine as
   ``~/.ssh/deployer.key.pub``.

   Once logged in you should be able to both ``sudo`` and run ``psql`` without a
   password prompt.

   If things are working, then update the sshd config to disallow root logins::

       PermitRootLogin no

   in ``/etc/ssh/sshd_config``, and restart the sshd server::

       [remote] $ service ssh restart

7. If you need to ``git clone`` or ``hg clone`` on the server then ensure that the
   ``admin`` public key (``/home/admin/.ssh/admin.key.pub`` on the remote machine) is
   copied to the source code provider, eg. codebasehq or github, by logging into
   your account with the provider and copy/pasting the key in the appropriate place.

