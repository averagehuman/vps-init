
vps-init
========

A collection of scripts for initially provisioning a single remote Ubuntu
server prior to installing a web application. (ubuntu version 12.04)

Prepare Remote Host
-------------------

1. Create the remote server via the VPS web interface or otherwise, and ensure
   that you can ssh to the machine as root::

       [local] $ ssh root@<IP-ADDRESS>

2. If there are no zipped public/private key pairs present, or you want to
   replace the ones that are here, run::

       [local] $ ./keygen

   This will create two sets of keys - one for you the deployer which will stay
   on the local machine, and one for a generic ``admin`` user on the remote host.
   The keys will be zipped and password-encrypted as a basic security mechanism
   to prevent at least the keys being added to source control as plaintext.

   TIP: you can include a ``.passphrase`` file in the same directory as
   ``keygen`` rather than typing and repeating at the console. The passphrase
   for the keys is used to also encrypt/decrypt the zip files.

3. Run the ``inithost`` script::

       [local] $ ./inithost <IP-ADDRESS>

   or::

       [local] $ ./inithost <IP-ADDRESS>:<PORT>

   This will create a tar file ``prepare_ubuntu.tgz`` and ``scp`` it to the remote host.
   The tar file contains two provisioning script ``server-init``  and ``server-install``
   along with other utilities.
   
4. ssh to the server and untar the file::

       [remote] $ tar -xzvf prepare_ubuntu.tgz

   and run the the init script::

       [remote] $ ./server-init

   This will create the ``admin`` user, update the system packages, install some basic
   tools (git, vim, etc...), and end by updating the ``sshd`` config.
   
5. IMPORTANT - make a note of the updated sshd port number printed out by the previous
   script and update your *local* ssh config file accordingly.
   
   For example, include a stanza similar to::

        Host <HOST>
        HostName <IP-ADDRESS>
        Port <PORT>
        User admin
        IdentityFile ~/.ssh/deployer.key

   where <PORT> is the random high port number generated by the ``prepare_ubuntu`` script.

6. Next run the additional package install script:

       [remote] $ ./server-install

   which will install additional tools and services, for example nginx.

7. Restart the server::

       [remote] $ shutdown -r now

8. Ensure you can ssh to the remote host as the ``admin`` user::

       [local] $ ssh admin@<HOST or IP_ADDRESS>

   If there are problems then check that the remote ``/home/admin/.ssh`` directory
   looks ok, eg. that file permissions and ownership are correct. Also check that
   ``/home/admin/.ssh/authorized_keys`` exists and contains the deployer public
   key. The deployer public key should be present on your local machine as
   ``~/.ssh/deployer.key.pub``.

   Once logged in you should be able to both ``sudo`` and run ``psql`` without a
   password prompt from the system or postgres respectively.

   If things are working, then update the sshd config to disallow password
   authentication and root logins::

       PasswordAuthentication no
       PermitRootLogin no

   in ``/etc/ssh/sshd_config``, and restart the sshd server::

       [remote] $ service ssh restart

9. If you need to ``git clone`` or ``hg clone`` on the server then ensure that the
   ``admin`` public key is copied to the repository provider (eg. codebasehq or
   github) by logging into your account with the provider and copy/pasting the key
   in the appropriate place. If you are not using SSH Agent Forwarding then
   ensure that the associated private key is present on the server,
   ie. that ``/home/admin/.ssh/server-admin.key exists``.


tools/prepare_ubuntu.sh
-----------------------

::

    #!/bin/sh
    
    set -e
    
    
    ###############################################################################
    # create admin, www and devpi users
    ###############################################################################
    groupadd -r -f admin
    groupadd -r -f www
    groupadd -r -f devpi
    if [ ! $(grep '^admin:' /etc/passwd) ]; then
        useradd -r -m -s /bin/bash -g admin -G www,devpi admin
    fi
    if [ ! $(grep '^www:' /etc/passwd) ]; then
        useradd -r -M -s /bin/false -d /nonexistent -g www www
    fi
    if [ ! $(grep '^devpi:' /etc/passwd) ]; then
        useradd -r -M -s /bin/false -d /nonexistent -g devpi devpi
    fi
    if [ ! -d /home/admin/.ssh ]; then
        mkdir /home/admin/.ssh
        chown admin:admin /home/admin/.ssh
        chmod 700 /home/admin/.ssh
    fi
    
    if [ -e .adminpass ]; then
        tr -d '\n' < .adminpass | chpasswd
        chown admin:admin .adminpass;
        chmod 600 .adminpass;
    else
        # ssh-only authentication
        passwd -l admin
    fi
    
    passwd -l www
    passwd -l devpi
    
    ###############################################################################
    # ssh key setup
    ###############################################################################
    cp ssh_config /home/admin/.ssh
    cp authorized_keys /home/admin/.ssh
    if [ -e server-admin-keys.zip ]; then
        echo ":: unpacking ssh keys"
        unzip server-admin-keys.zip
        cp server-admin-keys/* /home/admin/.ssh/
        rm -rf server-admin-keys
    fi
    chown -R admin:admin /home/admin/.ssh
    
    ###############################################################################
    # create static folders
    ###############################################################################
    
    mkdir -p /srv
    for d in static media; do
        mkdir -p /var/www/$d
        chown www:www /var/www/$d
        if [ ! -e /srv/$d ]; then
            ln -s /var/www/$d /srv/$d
        fi
    done
    
    
    
    ###############################################################################
    # update sudoers file
    ###############################################################################
    cat > /etc/sudoers <<EOF
    #
    # This file MUST be edited with the 'visudo' command as root.
    #
    # Please consider adding local content in /etc/sudoers.d/ instead of
    # directly modifying this file.
    #
    # See the man page for details on how to write a sudoers file.
    #
    Defaults	env_reset
    Defaults	exempt_group=admin
    Defaults	secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    
    # Host alias specification
    
    # User alias specification
    
    # Cmnd alias specification
    
    # User privilege specification
    root	ALL=(ALL:ALL) ALL
    
    # Members of the admin group may gain root privileges
    %admin  ALL=NOPASSWD:ALL
    
    # Allow members of group sudo to execute any command
    %sudo	ALL=(ALL:ALL) ALL
    
    
    EOF
    
    chmod 440 /etc/sudoers
    
    ###############################################################################
    # add varnish ppa
    ###############################################################################
    #if [ -z "$(grep 'varnish-3.0' /etc/apt/sources.list)" ]; then
    #    curl http://repo.varnish-cache.org/debian/GPG-key.txt | apt-key add -
    #    echo "deb http://repo.varnish-cache.org/ubuntu/ precise varnish-3.0" | tee -a /etc/apt/sources.list
    #fi
    
    ###############################################################################
    # apt-get package update
    ###############################################################################
    apt-get -y update
    apt-get -y dist-upgrade
    apt-get -y install linux-headers-$(uname -r) build-essential
    apt-get -y install postgresql libpq-dev
    apt-get -y install python-dev
    apt-get -y install vim git-core ufw unzip
    apt-get -y install memcached
    apt-get -y clean
    
    
    ###############################################################################
    # get more recent setuptools, pip and virtualenv than system defaults
    ###############################################################################
    # use default easy_install to install latest pip
    apt-get -y install python-setuptools
    easy_install pip
    # get latest setuptools
    pip install -U setuptools
    # remove default setuptools
    apt-get -y remove python-setuptools
    # get latest virtualenv
    pip install virtualenv
    
    ###############################################################################
    # enable ufw
    ###############################################################################
    sshport=$(python -c "from random import randint; print randint(10000,30000)")
    sed -i.orig -e "s/^Port .*/Port $sshport/g" /etc/ssh/sshd_config
    
    ufw default deny incoming
    ufw allow http
    ufw allow $sshport
    ufw enable
    
    echo "CHANGED SSH PORT: $sshport (restart to take effect)"
    


